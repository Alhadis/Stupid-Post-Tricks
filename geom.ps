%!PS

% Draw a rectangle centred at the current point
/rect { % <width> <height> rect -
	currentpoint
	newpath
	moveto

	% Move to top-left corner
	2 copy
	2 div neg exch
	2 div neg exch
	rmoveto

	% Draw edges
	dup 0 exch rlineto          % Left
	exch dup 3 1 roll 0 rlineto % Top
	dup neg 0 exch rlineto      % Right
	closepath                   % Bottom

	% Restore previous position
	2 div exch
	2 div exch
	rmoveto
} def

% Draw a circle centred at the current point
/circle { % <radius> circle -
	currentpoint
	currentpoint
	5 -1 roll
	newpath
	0 360 arc
	moveto
} def

% Draw an N-sided polygon centred at the current point
/polygon { % (<radius> | [<xRadius> <yRadius>]) <sides> polygon -
	% Resolve radius argument
	exch dup type /arraytype ne {[exch dup]} if exch
	
	currentpoint
	newpath
	moveto
	
	currentpoint
	4 -2 roll
	
	dup 360 exch div 0 exch 359 {
		dup 2 1 roll
		dup  90 sub cos 4 index 0 get mul
		exch 90 sub sin 4 index 1 get mul
		7 -2 roll 2 copy 9 2 roll
		exch 4 -1 roll add
		exch 3 -1 roll add
		3 -1 roll
		0.0 eq {moveto} {lineto} ifelse
	} for
	closepath
	pop pop
	moveto
} def
